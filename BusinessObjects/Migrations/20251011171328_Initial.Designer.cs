// <auto-generated />
using System;
using BusinessObjects.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BusinessObjects.Migrations
{
    [DbContext(typeof(SwapXContext))]
    [Migration("20251011171328_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BusinessObjects.Models.Account", b =>
                {
                    b.Property<string>("AccountId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("accountID");

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("address");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<string>("OtpCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime?>("OtpExpiredTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Password")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("password");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("phone");

                    b.Property<string>("Role")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Username")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("username");

                    b.HasKey("AccountId")
                        .HasName("PK__Account__F267253E9C6E442D");

                    b.ToTable("Account", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.Battery", b =>
                {
                    b.Property<string>("BatteryId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("BatteryID");

                    b.Property<string>("BatteryName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("batteryName");

                    b.Property<decimal?>("BatteryQuality")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("batteryQuality");

                    b.Property<string>("BatteryType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Battery_type");

                    b.Property<int?>("Capacity")
                        .HasColumnType("int")
                        .HasColumnName("capacity");

                    b.Property<string>("Specification")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("specification");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<string>("StationId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("stationID");

                    b.Property<string>("Status")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.HasKey("BatteryId")
                        .HasName("PK__Battery__5710803E287D4B4A");

                    b.HasIndex("StationId");

                    b.ToTable("Battery", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.BatteryHistory", b =>
                {
                    b.Property<string>("BatteryHistoryId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("BatteryHistoryID");

                    b.Property<DateTime?>("ActionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ActionType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BatteryId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("BatteryID");

                    b.Property<string>("EnergyLevel")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ExchangeBatteryId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("ExchangeBatteryID");

                    b.Property<string>("Notes")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<string>("StationId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("stationID");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Vin")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("VIN");

                    b.HasKey("BatteryHistoryId")
                        .HasName("PK__BatteryH__4E7644D24A446D7E");

                    b.HasIndex("BatteryId");

                    b.HasIndex("ExchangeBatteryId");

                    b.HasIndex("StationId");

                    b.HasIndex("Vin");

                    b.ToTable("BatteryHistory", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.BatteryReport", b =>
                {
                    b.Property<string>("BatteryReportId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("BatteryReportID");

                    b.Property<string>("AccountId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("AccountID");

                    b.Property<string>("BatteryId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("BatteryID");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("description");

                    b.Property<string>("Image")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("image");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<string>("StationId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("StationID");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.HasKey("BatteryReportId")
                        .HasName("PK__BatteryR__0A361DA7C09CCE11");

                    b.HasIndex("AccountId");

                    b.HasIndex("BatteryId");

                    b.HasIndex("StationId");

                    b.ToTable("BatteryReport", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.BssStaff", b =>
                {
                    b.Property<string>("StaffId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("StaffID");

                    b.Property<string>("AccountId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("AccountID");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<string>("StationId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("StationID");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.HasKey("StaffId")
                        .HasName("PK__BSS_Staf__96D4AAF7F2826E50");

                    b.HasIndex("AccountId");

                    b.HasIndex("StationId");

                    b.ToTable("BSS_Staff", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.Evdriver", b =>
                {
                    b.Property<string>("CustomerId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("CustomerID");

                    b.Property<string>("AccountId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("accountID");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.HasKey("CustomerId")
                        .HasName("PK__EVDriver__A4AE64B868918DE6");

                    b.HasIndex("AccountId");

                    b.ToTable("EVDriver", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.ExchangeBattery", b =>
                {
                    b.Property<string>("ExchangeBatteryId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("ExchangeBatteryID");

                    b.Property<string>("NewBatteryId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("NewBatteryID");

                    b.Property<string>("Notes")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("OldBatteryId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("OldBatteryID");

                    b.Property<string>("OrderId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("OrderID");

                    b.Property<string>("ScheduleId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("ScheduleID");

                    b.Property<string>("StaffAccountId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("StaffAccountID");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<string>("StationId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("stationID");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Vin")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("VIN");

                    b.HasKey("ExchangeBatteryId")
                        .HasName("PK__Exchange__B321FE92B7665EFC");

                    b.HasIndex("NewBatteryId");

                    b.HasIndex("OldBatteryId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ScheduleId");

                    b.HasIndex("StaffAccountId");

                    b.HasIndex("StationId");

                    b.HasIndex("Vin");

                    b.ToTable("ExchangeBattery", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.Form", b =>
                {
                    b.Property<string>("FormId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("FormID");

                    b.Property<string>("AccountId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("AccountID");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("date");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("description");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<string>("StationId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("StationID");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("status");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.HasKey("FormId")
                        .HasName("PK__Form__FB05B7BD4218BBBD");

                    b.HasIndex("AccountId");

                    b.HasIndex("StationId");

                    b.ToTable("Form", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.Order", b =>
                {
                    b.Property<string>("OrderId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("OrderID");

                    b.Property<string>("AccountId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("AccountID");

                    b.Property<string>("BatteryId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("BatteryID");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("date");

                    b.Property<string>("ServiceId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("ServiceID");

                    b.Property<string>("ServiceType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("service_type");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("status");

                    b.Property<decimal?>("Total")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.HasKey("OrderId")
                        .HasName("PK__Orders__C3905BAF8CE09CA2");

                    b.HasIndex("AccountId");

                    b.HasIndex("BatteryId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("BusinessObjects.Models.Package", b =>
                {
                    b.Property<string>("PackageId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("PackageID");

                    b.Property<string>("BatteryType")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnName("Battery_type");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("description");

                    b.Property<int?>("ExpiredDate")
                        .HasColumnType("int")
                        .HasColumnName("expiredDate");

                    b.Property<string>("PackageName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.HasKey("PackageId")
                        .HasName("PK__Package__322035EC6A45A890");

                    b.ToTable("Package", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.Rating", b =>
                {
                    b.Property<string>("RatingId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("RatingID");

                    b.Property<string>("AccountId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("AccountID");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("description");

                    b.Property<decimal?>("Rating1")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("rating");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<string>("StationId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("StationID");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.HasKey("RatingId")
                        .HasName("PK__Rating__FCCDF85CD48F902B");

                    b.HasIndex("AccountId");

                    b.HasIndex("StationId");

                    b.ToTable("Rating", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.Report", b =>
                {
                    b.Property<string>("ReportId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("ReportID");

                    b.Property<string>("AccountId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("AccountID");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("description");

                    b.Property<string>("Image")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("image");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<string>("StationId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("StationID");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.HasKey("ReportId")
                        .HasName("PK__Report__D5BD48E504DC6B1F");

                    b.HasIndex("AccountId");

                    b.HasIndex("StationId");

                    b.ToTable("Report", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.Slot", b =>
                {
                    b.Property<string>("SlotId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("SlotID");

                    b.Property<string>("BatteryId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("BatteryID");

                    b.Property<int?>("CordinateX")
                        .HasColumnType("int")
                        .HasColumnName("cordinate_x");

                    b.Property<int?>("CordinateY")
                        .HasColumnType("int")
                        .HasColumnName("cordinate_y");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<string>("StationId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("StationID");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.HasKey("SlotId")
                        .HasName("PK__Slot__0A124A4F88119764");

                    b.HasIndex("BatteryId");

                    b.HasIndex("StationId");

                    b.ToTable("Slot", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.Station", b =>
                {
                    b.Property<string>("StationId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("stationID");

                    b.Property<int?>("BatteryNumber")
                        .HasColumnType("int")
                        .HasColumnName("battery_number");

                    b.Property<string>("Location")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("location");

                    b.Property<decimal?>("Rating")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("rating");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<string>("StationName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("stationName");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.HasKey("StationId")
                        .HasName("PK__Station__F0A7F3E0EE3A1E80");

                    b.ToTable("Station", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.StationSchedule", b =>
                {
                    b.Property<string>("StationScheduleId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("StationScheduleID");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("date");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("description");

                    b.Property<string>("FormId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("FormID");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<string>("StationId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("StationID");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.HasKey("StationScheduleId")
                        .HasName("PK__StationS__12BF61BEC9CF80C5");

                    b.HasIndex("FormId");

                    b.HasIndex("StationId");

                    b.ToTable("StationSchedule", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.Vehicle", b =>
                {
                    b.Property<string>("Vin")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("VIN");

                    b.Property<string>("BatteryId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("BatteryID");

                    b.Property<string>("CustomerId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("CustomerID");

                    b.Property<DateTime?>("PackageExpiredate")
                        .HasColumnType("datetime");

                    b.Property<string>("PackageId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("PackageID");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("VehicleName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("vehicle_name");

                    b.Property<string>("VehicleType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("vehicle_type");

                    b.HasKey("Vin")
                        .HasName("PK__Vehicle__C5DF234D17ECC187");

                    b.HasIndex("BatteryId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PackageId");

                    b.ToTable("Vehicle", (string)null);
                });

            modelBuilder.Entity("BusinessObjects.Models.Battery", b =>
                {
                    b.HasOne("BusinessObjects.Models.Station", "Station")
                        .WithMany("Batteries")
                        .HasForeignKey("StationId")
                        .HasConstraintName("FK__Battery__station__5441852A");

                    b.Navigation("Station");
                });

            modelBuilder.Entity("BusinessObjects.Models.BatteryHistory", b =>
                {
                    b.HasOne("BusinessObjects.Models.Battery", "Battery")
                        .WithMany("BatteryHistories")
                        .HasForeignKey("BatteryId")
                        .HasConstraintName("FK__BatteryHi__Batte__5535A963");

                    b.HasOne("BusinessObjects.Models.ExchangeBattery", "ExchangeBattery")
                        .WithMany("BatteryHistories")
                        .HasForeignKey("ExchangeBatteryId")
                        .HasConstraintName("FK__BatteryHi__Excha__5629CD9C");

                    b.HasOne("BusinessObjects.Models.Station", "Station")
                        .WithMany("BatteryHistories")
                        .HasForeignKey("StationId")
                        .HasConstraintName("FK__BatteryHi__stati__571DF1D5");

                    b.HasOne("BusinessObjects.Models.Vehicle", "VinNavigation")
                        .WithMany("BatteryHistories")
                        .HasForeignKey("Vin")
                        .HasConstraintName("FK__BatteryHist__VIN__5812160E");

                    b.Navigation("Battery");

                    b.Navigation("ExchangeBattery");

                    b.Navigation("Station");

                    b.Navigation("VinNavigation");
                });

            modelBuilder.Entity("BusinessObjects.Models.BatteryReport", b =>
                {
                    b.HasOne("BusinessObjects.Models.Account", "Account")
                        .WithMany("BatteryReports")
                        .HasForeignKey("AccountId")
                        .HasConstraintName("FK__BatteryRe__Accou__59063A47");

                    b.HasOne("BusinessObjects.Models.Battery", "Battery")
                        .WithMany("BatteryReports")
                        .HasForeignKey("BatteryId")
                        .HasConstraintName("FK__BatteryRe__Batte__59FA5E80");

                    b.HasOne("BusinessObjects.Models.Station", "Station")
                        .WithMany("BatteryReports")
                        .HasForeignKey("StationId")
                        .HasConstraintName("FK__BatteryRe__Stati__5AEE82B9");

                    b.Navigation("Account");

                    b.Navigation("Battery");

                    b.Navigation("Station");
                });

            modelBuilder.Entity("BusinessObjects.Models.BssStaff", b =>
                {
                    b.HasOne("BusinessObjects.Models.Account", "Account")
                        .WithMany("BssStaffs")
                        .HasForeignKey("AccountId")
                        .HasConstraintName("FK__BSS_Staff__Accou__5BE2A6F2");

                    b.HasOne("BusinessObjects.Models.Station", "Station")
                        .WithMany("BssStaffs")
                        .HasForeignKey("StationId")
                        .HasConstraintName("FK__BSS_Staff__Stati__5CD6CB2B");

                    b.Navigation("Account");

                    b.Navigation("Station");
                });

            modelBuilder.Entity("BusinessObjects.Models.Evdriver", b =>
                {
                    b.HasOne("BusinessObjects.Models.Account", "Account")
                        .WithMany("Evdrivers")
                        .HasForeignKey("AccountId")
                        .HasConstraintName("FK__EVDriver__accoun__5DCAEF64");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("BusinessObjects.Models.ExchangeBattery", b =>
                {
                    b.HasOne("BusinessObjects.Models.Battery", "NewBattery")
                        .WithMany("ExchangeBatteryNewBatteries")
                        .HasForeignKey("NewBatteryId")
                        .HasConstraintName("FK__ExchangeB__NewBa__5FB337D6");

                    b.HasOne("BusinessObjects.Models.Battery", "OldBattery")
                        .WithMany("ExchangeBatteryOldBatteries")
                        .HasForeignKey("OldBatteryId")
                        .HasConstraintName("FK__ExchangeB__OldBa__60A75C0F");

                    b.HasOne("BusinessObjects.Models.Order", "Order")
                        .WithMany("ExchangeBatteries")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK__ExchangeB__Order__619B8048");

                    b.HasOne("BusinessObjects.Models.StationSchedule", "Schedule")
                        .WithMany("ExchangeBatteries")
                        .HasForeignKey("ScheduleId")
                        .HasConstraintName("FK__ExchangeB__Sched__628FA481");

                    b.HasOne("BusinessObjects.Models.Account", "StaffAccount")
                        .WithMany("ExchangeBatteries")
                        .HasForeignKey("StaffAccountId")
                        .HasConstraintName("FK__ExchangeB__Staff__6383C8BA");

                    b.HasOne("BusinessObjects.Models.Station", "Station")
                        .WithMany("ExchangeBatteries")
                        .HasForeignKey("StationId")
                        .HasConstraintName("FK__ExchangeB__stati__6477ECF3");

                    b.HasOne("BusinessObjects.Models.Vehicle", "VinNavigation")
                        .WithMany("ExchangeBatteries")
                        .HasForeignKey("Vin")
                        .HasConstraintName("FK__ExchangeBat__VIN__656C112C");

                    b.Navigation("NewBattery");

                    b.Navigation("OldBattery");

                    b.Navigation("Order");

                    b.Navigation("Schedule");

                    b.Navigation("StaffAccount");

                    b.Navigation("Station");

                    b.Navigation("VinNavigation");
                });

            modelBuilder.Entity("BusinessObjects.Models.Form", b =>
                {
                    b.HasOne("BusinessObjects.Models.Account", "Account")
                        .WithMany("Forms")
                        .HasForeignKey("AccountId")
                        .HasConstraintName("FK__Form__AccountID__66603565");

                    b.HasOne("BusinessObjects.Models.Station", "Station")
                        .WithMany("Forms")
                        .HasForeignKey("StationId")
                        .HasConstraintName("FK__Form__StationID__6754599E");

                    b.Navigation("Account");

                    b.Navigation("Station");
                });

            modelBuilder.Entity("BusinessObjects.Models.Order", b =>
                {
                    b.HasOne("BusinessObjects.Models.Account", "Account")
                        .WithMany("Orders")
                        .HasForeignKey("AccountId")
                        .HasConstraintName("FK__Orders__AccountI__68487DD7");

                    b.HasOne("BusinessObjects.Models.Battery", "Battery")
                        .WithMany("Orders")
                        .HasForeignKey("BatteryId")
                        .HasConstraintName("FK__Orders__BatteryI__693CA210");

                    b.Navigation("Account");

                    b.Navigation("Battery");
                });

            modelBuilder.Entity("BusinessObjects.Models.Rating", b =>
                {
                    b.HasOne("BusinessObjects.Models.Account", "Account")
                        .WithMany("Ratings")
                        .HasForeignKey("AccountId")
                        .HasConstraintName("FK__Rating__AccountI__6B24EA82");

                    b.HasOne("BusinessObjects.Models.Station", "Station")
                        .WithMany("Ratings")
                        .HasForeignKey("StationId")
                        .HasConstraintName("FK__Rating__StationI__6C190EBB");

                    b.Navigation("Account");

                    b.Navigation("Station");
                });

            modelBuilder.Entity("BusinessObjects.Models.Report", b =>
                {
                    b.HasOne("BusinessObjects.Models.Account", "Account")
                        .WithMany("Reports")
                        .HasForeignKey("AccountId")
                        .HasConstraintName("FK__Report__AccountI__6D0D32F4");

                    b.HasOne("BusinessObjects.Models.Station", "Station")
                        .WithMany("Reports")
                        .HasForeignKey("StationId")
                        .HasConstraintName("FK__Report__StationI__6E01572D");

                    b.Navigation("Account");

                    b.Navigation("Station");
                });

            modelBuilder.Entity("BusinessObjects.Models.Slot", b =>
                {
                    b.HasOne("BusinessObjects.Models.Battery", "Battery")
                        .WithMany("Slots")
                        .HasForeignKey("BatteryId")
                        .HasConstraintName("FK__Slot__BatteryID__6EF57B66");

                    b.HasOne("BusinessObjects.Models.Station", "Station")
                        .WithMany("Slots")
                        .HasForeignKey("StationId")
                        .HasConstraintName("FK__Slot__StationID__6FE99F9F");

                    b.Navigation("Battery");

                    b.Navigation("Station");
                });

            modelBuilder.Entity("BusinessObjects.Models.StationSchedule", b =>
                {
                    b.HasOne("BusinessObjects.Models.Form", "Form")
                        .WithMany("StationSchedules")
                        .HasForeignKey("FormId")
                        .HasConstraintName("FK__StationSc__FormI__70DDC3D8");

                    b.HasOne("BusinessObjects.Models.Station", "Station")
                        .WithMany("StationSchedules")
                        .HasForeignKey("StationId")
                        .HasConstraintName("FK__StationSc__Stati__71D1E811");

                    b.Navigation("Form");

                    b.Navigation("Station");
                });

            modelBuilder.Entity("BusinessObjects.Models.Vehicle", b =>
                {
                    b.HasOne("BusinessObjects.Models.Battery", "Battery")
                        .WithMany("Vehicles")
                        .HasForeignKey("BatteryId")
                        .HasConstraintName("FK__Vehicle__Battery__72C60C4A");

                    b.HasOne("BusinessObjects.Models.Evdriver", "Customer")
                        .WithMany("Vehicles")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK__Vehicle__Custome__01142BA1");

                    b.HasOne("BusinessObjects.Models.Package", "Package")
                        .WithMany("Vehicles")
                        .HasForeignKey("PackageId")
                        .HasConstraintName("FK__Vehicle__Package__73BA3083");

                    b.Navigation("Battery");

                    b.Navigation("Customer");

                    b.Navigation("Package");
                });

            modelBuilder.Entity("BusinessObjects.Models.Account", b =>
                {
                    b.Navigation("BatteryReports");

                    b.Navigation("BssStaffs");

                    b.Navigation("Evdrivers");

                    b.Navigation("ExchangeBatteries");

                    b.Navigation("Forms");

                    b.Navigation("Orders");

                    b.Navigation("Ratings");

                    b.Navigation("Reports");
                });

            modelBuilder.Entity("BusinessObjects.Models.Battery", b =>
                {
                    b.Navigation("BatteryHistories");

                    b.Navigation("BatteryReports");

                    b.Navigation("ExchangeBatteryNewBatteries");

                    b.Navigation("ExchangeBatteryOldBatteries");

                    b.Navigation("Orders");

                    b.Navigation("Slots");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("BusinessObjects.Models.Evdriver", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("BusinessObjects.Models.ExchangeBattery", b =>
                {
                    b.Navigation("BatteryHistories");
                });

            modelBuilder.Entity("BusinessObjects.Models.Form", b =>
                {
                    b.Navigation("StationSchedules");
                });

            modelBuilder.Entity("BusinessObjects.Models.Order", b =>
                {
                    b.Navigation("ExchangeBatteries");
                });

            modelBuilder.Entity("BusinessObjects.Models.Package", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("BusinessObjects.Models.Station", b =>
                {
                    b.Navigation("Batteries");

                    b.Navigation("BatteryHistories");

                    b.Navigation("BatteryReports");

                    b.Navigation("BssStaffs");

                    b.Navigation("ExchangeBatteries");

                    b.Navigation("Forms");

                    b.Navigation("Ratings");

                    b.Navigation("Reports");

                    b.Navigation("Slots");

                    b.Navigation("StationSchedules");
                });

            modelBuilder.Entity("BusinessObjects.Models.StationSchedule", b =>
                {
                    b.Navigation("ExchangeBatteries");
                });

            modelBuilder.Entity("BusinessObjects.Models.Vehicle", b =>
                {
                    b.Navigation("BatteryHistories");

                    b.Navigation("ExchangeBatteries");
                });
#pragma warning restore 612, 618
        }
    }
}
