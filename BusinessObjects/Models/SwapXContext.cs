// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace BusinessObjects.Models;

public partial class SwapXContext : DbContext
{
    public SwapXContext(DbContextOptions<SwapXContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Account> Accounts { get; set; }

    public virtual DbSet<Battery> Batteries { get; set; }

    public virtual DbSet<BatteryHistory> BatteryHistories { get; set; }

    public virtual DbSet<BatteryReport> BatteryReports { get; set; }

    public virtual DbSet<BssStaff> BssStaffs { get; set; }

    public virtual DbSet<Evdriver> Evdrivers { get; set; }

    public virtual DbSet<ExchangeBattery> ExchangeBatteries { get; set; }

    public virtual DbSet<Form> Forms { get; set; }

    public virtual DbSet<Order> Orders { get; set; }

    public virtual DbSet<Package> Packages { get; set; }

    public virtual DbSet<Rating> Ratings { get; set; }

    public virtual DbSet<Report> Reports { get; set; }

    public virtual DbSet<Slot> Slots { get; set; }

    public virtual DbSet<Station> Stations { get; set; }

    public virtual DbSet<StationSchedule> StationSchedules { get; set; }

    public virtual DbSet<Vehicle> Vehicles { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Account>(entity =>
        {
            entity.HasKey(e => e.AccountId).HasName("PK__Account__F267253E3545EB79");

            entity.ToTable("Account");

            entity.Property(e => e.AccountId)
                .HasMaxLength(100)
                .HasColumnName("accountID");
            entity.Property(e => e.Address)
                .HasMaxLength(255)
                .HasColumnName("address");
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .HasColumnName("email");
            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .HasColumnName("name");
            entity.Property(e => e.OtpCode).HasMaxLength(10);
            entity.Property(e => e.OtpExpiredTime).HasColumnType("datetime");
            entity.Property(e => e.Password)
                .HasMaxLength(255)
                .HasColumnName("password");
            entity.Property(e => e.Phone)
                .HasMaxLength(50)
                .HasColumnName("phone");
            entity.Property(e => e.Role).HasMaxLength(50);
            entity.Property(e => e.StartDate).HasColumnType("datetime");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .HasColumnName("status");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.Username)
                .HasMaxLength(50)
                .HasColumnName("username");
        });

        modelBuilder.Entity<Battery>(entity =>
        {
            entity.HasKey(e => e.BatteryId).HasName("PK__Battery__5710803EFBC41643");

            entity.ToTable("Battery");

            entity.Property(e => e.BatteryId)
                .HasMaxLength(100)
                .HasColumnName("BatteryID");
            entity.Property(e => e.BatteryName)
                .HasMaxLength(50)
                .HasColumnName("batteryName");
            entity.Property(e => e.BatteryQuality)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("batteryQuality");
            entity.Property(e => e.BatteryType)
                .HasMaxLength(100)
                .HasColumnName("Battery_type");
            entity.Property(e => e.Capacity).HasColumnName("capacity");
            entity.Property(e => e.Specification)
                .HasMaxLength(20)
                .HasColumnName("specification");
            entity.Property(e => e.StartDate).HasColumnType("datetime");
            entity.Property(e => e.StationId)
                .HasMaxLength(100)
                .HasColumnName("stationID");
            entity.Property(e => e.Status)
                .HasMaxLength(25)
                .HasColumnName("status");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");

            entity.HasOne(d => d.Station).WithMany(p => p.Batteries)
                .HasForeignKey(d => d.StationId)
                .HasConstraintName("FK__Battery__station__5FF32EF8");
        });

        modelBuilder.Entity<BatteryHistory>(entity =>
        {
            entity.HasKey(e => e.BatteryHistoryId).HasName("PK__BatteryH__4E7644D2A1D48F84");

            entity.ToTable("BatteryHistory");

            entity.Property(e => e.BatteryHistoryId)
                .HasMaxLength(100)
                .HasColumnName("BatteryHistoryID");
            entity.Property(e => e.ActionType).HasMaxLength(50);
            entity.Property(e => e.BatteryId)
                .HasMaxLength(100)
                .HasColumnName("BatteryID");
            entity.Property(e => e.EnergyLevel).HasMaxLength(50);
            entity.Property(e => e.ExchangeBatteryId)
                .HasMaxLength(100)
                .HasColumnName("ExchangeBatteryID");
            entity.Property(e => e.Notes).HasMaxLength(50);
            entity.Property(e => e.StartDate).HasColumnType("datetime");
            entity.Property(e => e.StationId)
                .HasMaxLength(100)
                .HasColumnName("stationID");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .HasColumnName("status");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.Vin)
                .HasMaxLength(100)
                .HasColumnName("VIN");

            entity.HasOne(d => d.Battery).WithMany(p => p.BatteryHistories)
                .HasForeignKey(d => d.BatteryId)
                .HasConstraintName("FK__BatteryHi__Batte__1466F737");

            entity.HasOne(d => d.ExchangeBattery).WithMany(p => p.BatteryHistories)
                .HasForeignKey(d => d.ExchangeBatteryId)
                .HasConstraintName("FK__BatteryHi__Excha__155B1B70");

            entity.HasOne(d => d.Station).WithMany(p => p.BatteryHistories)
                .HasForeignKey(d => d.StationId)
                .HasConstraintName("FK__BatteryHi__stati__174363E2");

            entity.HasOne(d => d.VinNavigation).WithMany(p => p.BatteryHistories)
                .HasForeignKey(d => d.Vin)
                .HasConstraintName("FK__BatteryHist__VIN__164F3FA9");
        });

        modelBuilder.Entity<BatteryReport>(entity =>
        {
            entity.HasKey(e => e.BatteryReportId).HasName("PK__BatteryR__0A361DA7FBC1C1A4");

            entity.ToTable("BatteryReport");

            entity.Property(e => e.BatteryReportId)
                .HasMaxLength(100)
                .HasColumnName("BatteryReportID");
            entity.Property(e => e.AccountId)
                .HasMaxLength(100)
                .HasColumnName("AccountID");
            entity.Property(e => e.BatteryId)
                .HasMaxLength(100)
                .HasColumnName("BatteryID");
            entity.Property(e => e.Description)
                .HasMaxLength(100)
                .HasColumnName("description");
            entity.Property(e => e.ExchangeBatteryId)
                .HasMaxLength(100)
                .HasColumnName("ExchangeBatteryID");
            entity.Property(e => e.Image)
                .HasMaxLength(255)
                .HasColumnName("image");
            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .HasColumnName("name");
            entity.Property(e => e.StartDate).HasColumnType("datetime");
            entity.Property(e => e.StationId)
                .HasMaxLength(100)
                .HasColumnName("StationID");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .HasColumnName("status");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");

            entity.HasOne(d => d.Account).WithMany(p => p.BatteryReports)
                .HasForeignKey(d => d.AccountId)
                .HasConstraintName("FK__BatteryRe__Accou__7F6BDA51");

            entity.HasOne(d => d.Battery).WithMany(p => p.BatteryReports)
                .HasForeignKey(d => d.BatteryId)
                .HasConstraintName("FK__BatteryRe__Batte__015422C3");

            entity.HasOne(d => d.ExchangeBattery).WithMany(p => p.BatteryReports)
                .HasForeignKey(d => d.ExchangeBatteryId)
                .HasConstraintName("FK_BatteryReport_ExchangeBattery");

            entity.HasOne(d => d.Station).WithMany(p => p.BatteryReports)
                .HasForeignKey(d => d.StationId)
                .HasConstraintName("FK__BatteryRe__Stati__005FFE8A");
        });

        modelBuilder.Entity<BssStaff>(entity =>
        {
            entity.HasKey(e => e.StaffId).HasName("PK__BSS_Staf__96D4AAF75695419E");

            entity.ToTable("BSS_Staff");

            entity.Property(e => e.StaffId)
                .HasMaxLength(100)
                .HasColumnName("StaffID");
            entity.Property(e => e.AccountId)
                .HasMaxLength(100)
                .HasColumnName("AccountID");
            entity.Property(e => e.StartDate).HasColumnType("datetime");
            entity.Property(e => e.StationId)
                .HasMaxLength(100)
                .HasColumnName("StationID");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .HasColumnName("status");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");

            entity.HasOne(d => d.Account).WithMany(p => p.BssStaffs)
                .HasForeignKey(d => d.AccountId)
                .HasConstraintName("FK__BSS_Staff__Accou__6C5905DD");

            entity.HasOne(d => d.Station).WithMany(p => p.BssStaffs)
                .HasForeignKey(d => d.StationId)
                .HasConstraintName("FK__BSS_Staff__Stati__6D4D2A16");
        });

        modelBuilder.Entity<Evdriver>(entity =>
        {
            entity.HasKey(e => e.CustomerId).HasName("PK__EVDriver__A4AE64B890FB4533");

            entity.ToTable("EVDriver");

            entity.Property(e => e.CustomerId)
                .HasMaxLength(100)
                .HasColumnName("CustomerID");
            entity.Property(e => e.AccountId)
                .HasMaxLength(100)
                .HasColumnName("accountID");
            entity.Property(e => e.StartDate).HasColumnType("datetime");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .HasColumnName("status");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");

            entity.HasOne(d => d.Account).WithMany(p => p.Evdrivers)
                .HasForeignKey(d => d.AccountId)
                .HasConstraintName("FK__EVDriver__accoun__697C9932");
        });

        modelBuilder.Entity<ExchangeBattery>(entity =>
        {
            entity.HasKey(e => e.ExchangeBatteryId).HasName("PK__Exchange__B321FE9244402C2D");

            entity.ToTable("ExchangeBattery");

            entity.Property(e => e.ExchangeBatteryId)
                .HasMaxLength(100)
                .HasColumnName("ExchangeBatteryID");
            entity.Property(e => e.NewBatteryId)
                .HasMaxLength(100)
                .HasColumnName("NewBatteryID");
            entity.Property(e => e.Notes).HasMaxLength(50);
            entity.Property(e => e.OldBatteryId)
                .HasMaxLength(100)
                .HasColumnName("OldBatteryID");
            entity.Property(e => e.OrderId)
                .HasMaxLength(100)
                .HasColumnName("OrderID");
            entity.Property(e => e.ScheduleId)
                .HasMaxLength(100)
                .HasColumnName("ScheduleID");
            entity.Property(e => e.StaffAccountId)
                .HasMaxLength(100)
                .HasColumnName("StaffAccountID");
            entity.Property(e => e.StartDate).HasColumnType("datetime");
            entity.Property(e => e.StationId)
                .HasMaxLength(100)
                .HasColumnName("stationID");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .HasColumnName("status");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.Vin)
                .HasMaxLength(100)
                .HasColumnName("VIN");

            entity.HasOne(d => d.NewBattery).WithMany(p => p.ExchangeBatteryNewBatteries)
                .HasForeignKey(d => d.NewBatteryId)
                .HasConstraintName("FK__ExchangeB__NewBa__0DB9F9A8");

            entity.HasOne(d => d.OldBattery).WithMany(p => p.ExchangeBatteryOldBatteries)
                .HasForeignKey(d => d.OldBatteryId)
                .HasConstraintName("FK__ExchangeB__OldBa__0CC5D56F");

            entity.HasOne(d => d.Order).WithMany(p => p.ExchangeBatteries)
                .HasForeignKey(d => d.OrderId)
                .HasConstraintName("FK__ExchangeB__Order__10966653");

            entity.HasOne(d => d.Schedule).WithMany(p => p.ExchangeBatteries)
                .HasForeignKey(d => d.ScheduleId)
                .HasConstraintName("FK__ExchangeB__Sched__0FA2421A");

            entity.HasOne(d => d.StaffAccount).WithMany(p => p.ExchangeBatteries)
                .HasForeignKey(d => d.StaffAccountId)
                .HasConstraintName("FK__ExchangeB__Staff__0EAE1DE1");

            entity.HasOne(d => d.Station).WithMany(p => p.ExchangeBatteries)
                .HasForeignKey(d => d.StationId)
                .HasConstraintName("FK__ExchangeB__stati__118A8A8C");

            entity.HasOne(d => d.VinNavigation).WithMany(p => p.ExchangeBatteries)
                .HasForeignKey(d => d.Vin)
                .HasConstraintName("FK__ExchangeBat__VIN__0BD1B136");
        });

        modelBuilder.Entity<Form>(entity =>
        {
            entity.HasKey(e => e.FormId).HasName("PK__Form__FB05B7BD37CE4E1C");

            entity.ToTable("Form");

            entity.Property(e => e.FormId)
                .HasMaxLength(100)
                .HasColumnName("FormID");
            entity.Property(e => e.AccountId)
                .HasMaxLength(100)
                .HasColumnName("AccountID");
            entity.Property(e => e.BatteryId)
                .HasMaxLength(100)
                .HasColumnName("BatteryID");
            entity.Property(e => e.Date).HasColumnName("date");
            entity.Property(e => e.Description)
                .HasMaxLength(100)
                .HasColumnName("description");
            entity.Property(e => e.StartDate).HasColumnType("datetime");
            entity.Property(e => e.StationId)
                .HasMaxLength(100)
                .HasColumnName("StationID");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .HasColumnName("status");
            entity.Property(e => e.Title)
                .HasMaxLength(50)
                .HasColumnName("title");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.Vin)
                .HasMaxLength(100)
                .HasColumnName("VIN");

            entity.HasOne(d => d.Account).WithMany(p => p.Forms)
                .HasForeignKey(d => d.AccountId)
                .HasConstraintName("FK__Form__AccountID__702996C1");

            entity.HasOne(d => d.Station).WithMany(p => p.Forms)
                .HasForeignKey(d => d.StationId)
                .HasConstraintName("FK__Form__StationID__711DBAFA");
        });

        modelBuilder.Entity<Order>(entity =>
        {
            entity.HasKey(e => e.OrderId).HasName("PK__Orders__C3905BAFF4964C89");

            entity.Property(e => e.OrderId)
                .HasMaxLength(100)
                .HasColumnName("OrderID");
            entity.Property(e => e.AccountId)
                .HasMaxLength(100)
                .HasColumnName("AccountID");
            entity.Property(e => e.BatteryId)
                .HasMaxLength(100)
                .HasColumnName("BatteryID");
            entity.Property(e => e.Date).HasColumnName("date");
            entity.Property(e => e.ServiceId)
                .HasMaxLength(100)
                .HasColumnName("ServiceID");
            entity.Property(e => e.ServiceType)
                .HasMaxLength(100)
                .HasColumnName("service_type");
            entity.Property(e => e.StartDate).HasColumnType("datetime");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .HasColumnName("status");
            entity.Property(e => e.Total).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");

            entity.HasOne(d => d.Account).WithMany(p => p.Orders)
                .HasForeignKey(d => d.AccountId)
                .HasConstraintName("FK__Orders__AccountI__7B9B496D");

            entity.HasOne(d => d.Battery).WithMany(p => p.Orders)
                .HasForeignKey(d => d.BatteryId)
                .HasConstraintName("FK__Orders__BatteryI__7C8F6DA6");
        });

        modelBuilder.Entity<Package>(entity =>
        {
            entity.HasKey(e => e.PackageId).HasName("PK__Package__322035ECCFD86AD3");

            entity.ToTable("Package");

            entity.Property(e => e.PackageId)
                .HasMaxLength(100)
                .HasColumnName("PackageID");
            entity.Property(e => e.BatteryType)
                .HasMaxLength(25)
                .HasColumnName("Battery_type");
            entity.Property(e => e.Description)
                .HasMaxLength(100)
                .HasColumnName("description");
            entity.Property(e => e.ExpiredDate).HasColumnName("expiredDate");
            entity.Property(e => e.PackageName).HasMaxLength(100);
            entity.Property(e => e.Price).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.StartDate).HasColumnType("datetime");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .HasColumnName("status");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<Rating>(entity =>
        {
            entity.HasKey(e => e.RatingId).HasName("PK__Rating__FCCDF85CEEFCB1C0");

            entity.ToTable("Rating");

            entity.Property(e => e.RatingId)
                .HasMaxLength(100)
                .HasColumnName("RatingID");
            entity.Property(e => e.AccountId)
                .HasMaxLength(100)
                .HasColumnName("AccountID");
            entity.Property(e => e.Description)
                .HasMaxLength(100)
                .HasColumnName("description");
            entity.Property(e => e.Rating1)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("rating");
            entity.Property(e => e.StartDate).HasColumnType("datetime");
            entity.Property(e => e.StationId)
                .HasMaxLength(100)
                .HasColumnName("StationID");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .HasColumnName("status");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");

            entity.HasOne(d => d.Account).WithMany(p => p.Ratings)
                .HasForeignKey(d => d.AccountId)
                .HasConstraintName("FK__Rating__AccountI__74EE4BDE");

            entity.HasOne(d => d.Station).WithMany(p => p.Ratings)
                .HasForeignKey(d => d.StationId)
                .HasConstraintName("FK__Rating__StationI__73FA27A5");
        });

        modelBuilder.Entity<Report>(entity =>
        {
            entity.HasKey(e => e.ReportId).HasName("PK__Report__D5BD48E580BC9884");

            entity.ToTable("Report");

            entity.Property(e => e.ReportId)
                .HasMaxLength(100)
                .HasColumnName("ReportID");
            entity.Property(e => e.AccountId)
                .HasMaxLength(100)
                .HasColumnName("AccountID");
            entity.Property(e => e.Description)
                .HasMaxLength(100)
                .HasColumnName("description");
            entity.Property(e => e.Image)
                .HasMaxLength(200)
                .HasColumnName("image");
            entity.Property(e => e.Name)
                .HasMaxLength(50)
                .HasColumnName("name");
            entity.Property(e => e.StartDate).HasColumnType("datetime");
            entity.Property(e => e.StationId)
                .HasMaxLength(100)
                .HasColumnName("StationID");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .HasColumnName("status");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");

            entity.HasOne(d => d.Account).WithMany(p => p.Reports)
                .HasForeignKey(d => d.AccountId)
                .HasConstraintName("FK__Report__AccountI__08012052");

            entity.HasOne(d => d.Station).WithMany(p => p.Reports)
                .HasForeignKey(d => d.StationId)
                .HasConstraintName("FK__Report__StationI__08F5448B");
        });

        modelBuilder.Entity<Slot>(entity =>
        {
            entity.HasKey(e => e.SlotId).HasName("PK__Slot__0A124A4F193A647E");

            entity.ToTable("Slot");

            entity.Property(e => e.SlotId)
                .HasMaxLength(100)
                .HasColumnName("SlotID");
            entity.Property(e => e.BatteryId)
                .HasMaxLength(100)
                .HasColumnName("BatteryID");
            entity.Property(e => e.CordinateX).HasColumnName("cordinate_x");
            entity.Property(e => e.CordinateY).HasColumnName("cordinate_y");
            entity.Property(e => e.StartDate).HasColumnType("datetime");
            entity.Property(e => e.StationId)
                .HasMaxLength(100)
                .HasColumnName("StationID");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .HasColumnName("status");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");

            entity.HasOne(d => d.Battery).WithMany(p => p.Slots)
                .HasForeignKey(d => d.BatteryId)
                .HasConstraintName("FK__Slot__BatteryID__0524B3A7");

            entity.HasOne(d => d.Station).WithMany(p => p.Slots)
                .HasForeignKey(d => d.StationId)
                .HasConstraintName("FK__Slot__StationID__04308F6E");
        });

        modelBuilder.Entity<Station>(entity =>
        {
            entity.HasKey(e => e.StationId).HasName("PK__Station__F0A7F3E0D8121AC1");

            entity.ToTable("Station");

            entity.Property(e => e.StationId)
                .HasMaxLength(100)
                .HasColumnName("stationID");
            entity.Property(e => e.BatteryNumber).HasColumnName("battery_number");
            entity.Property(e => e.Location)
                .HasMaxLength(50)
                .HasColumnName("location");
            entity.Property(e => e.Rating)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("rating");
            entity.Property(e => e.StartDate).HasColumnType("datetime");
            entity.Property(e => e.StationName)
                .HasMaxLength(50)
                .HasColumnName("stationName");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .HasColumnName("status");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<StationSchedule>(entity =>
        {
            entity.HasKey(e => e.StationScheduleId).HasName("PK__StationS__12BF61BE1CB50D57");

            entity.ToTable("StationSchedule");

            entity.Property(e => e.StationScheduleId)
                .HasMaxLength(100)
                .HasColumnName("StationScheduleID");
            entity.Property(e => e.Date).HasColumnName("date");
            entity.Property(e => e.Description)
                .HasMaxLength(100)
                .HasColumnName("description");
            entity.Property(e => e.FormId)
                .HasMaxLength(100)
                .HasColumnName("FormID");
            entity.Property(e => e.StartDate).HasColumnType("datetime");
            entity.Property(e => e.StationId)
                .HasMaxLength(100)
                .HasColumnName("StationID");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .HasColumnName("status");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");

            entity.HasOne(d => d.Form).WithMany(p => p.StationSchedules)
                .HasForeignKey(d => d.FormId)
                .HasConstraintName("FK__StationSc__FormI__78BEDCC2");

            entity.HasOne(d => d.Station).WithMany(p => p.StationSchedules)
                .HasForeignKey(d => d.StationId)
                .HasConstraintName("FK__StationSc__Stati__77CAB889");
        });

        modelBuilder.Entity<Vehicle>(entity =>
        {
            entity.HasKey(e => e.Vin).HasName("PK__Vehicle__C5DF234D224034D2");

            entity.ToTable("Vehicle");

            entity.Property(e => e.Vin)
                .HasMaxLength(100)
                .HasColumnName("VIN");
            entity.Property(e => e.BatteryId)
                .HasMaxLength(100)
                .HasColumnName("BatteryID");
            entity.Property(e => e.CustomerId)
                .HasMaxLength(100)
                .HasColumnName("CustomerID");
            entity.Property(e => e.PackageExpiredate).HasColumnType("datetime");
            entity.Property(e => e.PackageId)
                .HasMaxLength(100)
                .HasColumnName("PackageID");
            entity.Property(e => e.StartDate).HasColumnType("datetime");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .HasColumnName("status");
            entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            entity.Property(e => e.VehicleName)
                .HasMaxLength(50)
                .HasColumnName("vehicle_name");
            entity.Property(e => e.VehicleType)
                .HasMaxLength(50)
                .HasColumnName("vehicle_type");

            entity.HasOne(d => d.Battery).WithMany(p => p.Vehicles)
                .HasForeignKey(d => d.BatteryId)
                .HasConstraintName("FK__Vehicle__Battery__64B7E415");

            entity.HasOne(d => d.Customer).WithMany(p => p.Vehicles)
                .HasForeignKey(d => d.CustomerId)
                .HasConstraintName("FK__Vehicle__Custome__1A1FD08D");

            entity.HasOne(d => d.Package).WithMany(p => p.Vehicles)
                .HasForeignKey(d => d.PackageId)
                .HasConstraintName("FK__Vehicle__Package__65AC084E");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}